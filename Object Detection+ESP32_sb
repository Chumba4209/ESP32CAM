```cpp
/* The ESP32CAM is able to identify objects: "yellow motor (confidence)" and "white pods (confidence)" on a 0.96-inch OLED
 * Added WiFiManager for user-configurable WiFi credentials via a configuration portal
 */

#include <CynthiaK-project-1_inferencing.h>
#include "edge-impulse-sdk/dsp/image/image.hpp"
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiManager.h> // https://github.com/tzapu/WiFiManager
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Camera model (AI Thinker ESP32-CAM)
#define CAMERA_MODEL_AI_THINKER

#if defined(CAMERA_MODEL_AI_THINKER)
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22
#else
#error "Camera model not selected"
#endif

// OLED configuration (0.96-inch SSD1306, 128x64)
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_SDA 15 // GPIO 15 for SDA
#define OLED_SCL 14 // GPIO 14 for SCL
#define OLED_RESET -1 // No reset pin
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Edge Impulse constants
#define EI_CAMERA_RAW_FRAME_BUFFER_COLS 320
#define EI_CAMERA_RAW_FRAME_BUFFER_ROWS 240
#define EI_CAMERA_FRAME_BYTE_SIZE 3

// Private variables
static bool debug_nn = false;
static bool is_initialised = false;
uint8_t *snapshot_buf;

// WiFiManager instance
WiFiManager wifiManager;

// Camera configuration
static camera_config_t camera_config = {
    .pin_pwdn = PWDN_GPIO_NUM,
    .pin_reset = RESET_GPIO_NUM,
    .pin_xclk = XCLK_GPIO_NUM,
    .pin_sscb_sda = SIOD_GPIO_NUM,
    .pin_sscb_scl = SIOC_GPIO_NUM,
    .pin_d7 = Y9_GPIO_NUM,
    .pin_d6 = Y8_GPIO_NUM,
    .pin_d5 = Y7_GPIO_NUM,
    .pin_d4 = Y6_GPIO_NUM,
    .pin_d3 = Y5_GPIO_NUM,
    .pin_d2 = Y4_GPIO_NUM,
    .pin_d1 = Y3_GPIO_NUM,
    .pin_d0 = Y2_GPIO_NUM,
    .pin_vsync = VSYNC_GPIO_NUM,
    .pin_href = HREF_GPIO_NUM,
    .pin_pclk = PCLK_GPIO_NUM,
    .xclk_freq_hz = 20000000,
    .ledc_timer = LEDC_TIMER_0,
    .ledc_channel = LEDC_CHANNEL_0,
    .pixel_format = PIXFORMAT_JPEG,
    .frame_size = FRAMESIZE_QVGA, // 320x240 to reduce memory usage
    .jpeg_quality = 15, // Lower quality for smaller images
    .fb_count = 1,
    .fb_location = CAMERA_FB_IN_PSRAM,
    .grab_mode = CAMERA_GRAB_WHEN_EMPTY,
};

// Function declarations
bool ei_camera_init(void);
void ei_camera_deinit(void);
bool ei_camera_capture(uint32_t img_width, uint32_t img_height, uint8_t *out_buf);
static int ei_camera_get_data(size_t offset, size_t length, float *out_ptr);

void setup() {
  Serial.begin(115200);
  delay(1000); // Ensure Serial initializes
  Serial.println("Edge Impulse Inferencing Demo");

  // Print model labels
  Serial.println("Model labels:");
  for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
    Serial.printf("  %s\n", ei_classifier_inferencing_categories[i]);
  }

  // Initialize OLED display
  Wire.begin(OLED_SDA, OLED_SCL);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED init failed");
    while (1);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Initializing...");
  display.display();

  // Initialize WiFiManager
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("WiFi: Connecting...");
  display.display();
  Serial.println("Starting WiFiManager...");
  wifiManager.setTimeout(180); // 3 minutes timeout for configuration
  wifiManager.setAPCallback([](WiFiManager *myWiFiManager) {
    Serial.println("Entered config mode");
    Serial.printf("AP Name: %s\n", myWiFiManager->getConfigPortalSSID().c_str());
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Connect to AP:");
    display.println(myWiFiManager->getConfigPortalSSID());
    display.println("IP: 192.168.4.1");
    display.display();
  });

  // Connect to WiFi or start configuration portal
  if (!wifiManager.autoConnect("ESP32-CAM-Config")) {
    Serial.println("Failed to connect and hit timeout");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("WiFi: Failed");
    display.display();
    delay(3000);
    ESP.restart();
  }

  // WiFi connected
  Serial.println("WiFi connected");
  Serial.printf("IP Address: %s\n", WiFi.localIP().toString().c_str());
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("WiFi: Connected");
  display.println(WiFi.localIP().toString());
  display.display();
  delay(2000);

  // Initialize camera
  if (!ei_camera_init()) {
    Serial.println("Failed to initialize Camera!");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Camera init failed");
    display.display();
    while (1);
  }
  Serial.println("Camera initialized");
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Camera OK");
  display.display();

  Serial.println("\nStarting continuous inference in 2 seconds...");
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Starting inference...");
  display.display();
  delay(2000);
}

void loop() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Capturing...");
  display.display();

  // Allocate buffer
  snapshot_buf = (uint8_t*)malloc(EI_CAMERA_RAW_FRAME_BUFFER_COLS * EI_CAMERA_RAW_FRAME_BUFFER_ROWS * EI_CAMERA_FRAME_BYTE_SIZE);
  if (snapshot_buf == nullptr) {
    Serial.println("ERR: Failed to allocate snapshot buffer!");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Buffer alloc failed");
    display.display();
    delay(5000);
    return;
  }

  // Capture and process image
  ei::signal_t signal;
  signal.total_length = EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT;
  signal.get_data = &ei_camera_get_data;

  if (!ei_camera_capture((size_t)EI_CLASSIFIER_INPUT_WIDTH, (size_t)EI_CLASSIFIER_INPUT_HEIGHT, snapshot_buf)) {
    Serial.println("Failed to capture image");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Capture failed");
    display.display();
    free(snapshot_buf);
    delay(5000);
    return;
  }

  // Run classifier
  ei_impulse_result_t result = { 0 };
  EI_IMPULSE_ERROR err = run_classifier(&signal, &result, debug_nn);
  if (err != EI_IMPULSE_OK) {
    Serial.printf("ERR: Failed to run classifier (%d)\n", err);
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Classifier failed");
    display.display();
    free(snapshot_buf);
    delay(5000);
    return;
  }

  // Display predictions
  display.clearDisplay();
  display.setCursor(0, 0);
  Serial.println("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.):",
                 result.timing.dsp, result.timing.classification, result.timing.anomaly);
  bool object_detected = false;
  for (uint32_t i = 0; i < result.bounding_boxes_count; i++) {
    ei_impulse_result_bounding_box_t bb = result.bounding_boxes[i];
    if (bb.value == 0) continue;
    Serial.printf("  %s (%.2f) [x:%u, y:%u, w:%u, h:%u]\n",
                  bb.label, bb.value, bb.x, bb.y, bb.width, bb.height);
    if (bb.value > 0.7) { // Show only high-confidence detections on OLED
      display.printf("%s (%.2f)\n", bb.label, bb.value);
      object_detected = true;
    }
  }
  if (!object_detected) {
    Serial.println("  No objects detected");
    display.println("No objects detected");
  }
  display.display();
  free(snapshot_buf);
  delay(5000);
}

// Camera functions (unchanged)
bool ei_camera_init(void) {
  if (is_initialised) return true;
  esp_err_t err = esp_camera_init(&camera_config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x\n", err);
    return false;
  }
  sensor_t *s = esp_camera_sensor_get();
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);
    s->set_brightness(s, 1);
    s->set_saturation(s, 0);
  }
  is_initialised = true;
  return true;
}

void ei_camera_deinit(void) {
  esp_err_t err = esp_camera_deinit();
  if (err != ESP_OK) {
    Serial.println("Camera deinit failed");
  }
  is_initialised = false;
}

bool ei_camera_capture(uint32_t img_width, uint32_t img_height, uint8_t *out_buf) {
  if (!is_initialised) {
    Serial.println("ERR: Camera is not initialized");
    return false;
  }
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return false;
  }
  bool converted = fmt2rgb888(fb->buf, fb->len, PIXFORMAT_JPEG, out_buf);
  esp_camera_fb_return(fb);
  if (!converted) {
    Serial.println("Conversion failed");
    return false;
  }
  if ((img_width != EI_CAMERA_RAW_FRAME_BUFFER_COLS) || (img_height != EI_CAMERA_RAW_FRAME_BUFFER_ROWS)) {
    ei::image::processing::crop_and_interpolate_rgb888(
      out_buf, EI_CAMERA_RAW_FRAME_BUFFER_COLS, EI_CAMERA_RAW_FRAME_BUFFER_ROWS,
      out_buf, img_width, img_height);
  }
  return true;
}

static int ei_camera_get_data(size_t offset, size_t length, float *out_ptr) {
  size_t pixel_ix = offset * 3;
  size_t pixels_left = length;
  size_t out_ptr_ix = 0;
  while (pixels_left != 0) {
    out_ptr[out_ptr_ix] = (snapshot_buf[pixel_ix + 2] << 16) + (snapshot_buf[pixel_ix + 1] << 8) + snapshot_buf[pixel_ix];
    out_ptr_ix++;
    pixel_ix += 3;
    pixels_left--;
  }
  return 0;
}

#if !defined(EI_CLASSIFIER_SENSOR) || EI_CLASSIFIER_SENSOR != EI_CLASSIFIER_SENSOR_CAMERA
#error "Invalid model for current sensor"
#endif
```
